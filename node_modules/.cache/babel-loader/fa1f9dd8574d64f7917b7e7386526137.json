{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/riaagnesjose/transcode/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport TranscodeOutput from \"./components/Transcoded\";\nimport { initializeTranscoding } from \"./services\";\nimport './App.css';\n\nfunction App() {\n  _s();\n\n  const [userState, setUserState] = useState({\n    data: {},\n    error: \"\",\n    message: \"\"\n  });\n\n  const handleSearch = data => {\n    setUserState({\n      data: data\n    });\n  };\n\n  const handleError = error => {\n    setUserState({\n      error: error\n    });\n  };\n\n  let content;\n  let searchPokemon;\n  let pokemonCard;\n  let errorContent;\n\n  const performFetching = () => {\n    userState.message = \"Conversion in Progress...\";\n    userState.error = \"\";\n    initializeTranscoding().then(data => {\n      userState.message = \"Conversion completed!\";\n      userState.error = \"\";\n      userState.data = data;\n    }).catch(err => {});\n  };\n\n  if (userState.data) {\n    content = /*#__PURE__*/_jsxDEV(TranscodeOutput, {\n      user: userState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add\",\n      onClick: performFetching,\n      children: \"Intialize Convertion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HyDCz92QZkFyn/4KOClXfTewlPM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/riaagnesjose/transcode/src/App.js"],"names":["React","useState","useEffect","TranscodeOutput","initializeTranscoding","App","userState","setUserState","data","error","message","handleSearch","handleError","content","searchPokemon","pokemonCard","errorContent","performFetching","then","catch","err"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,SAAQC,qBAAR,QAAoC,YAApC;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC;AAEzCO,IAAAA,IAAI,EAAE,EAFmC;AAGzCC,IAAAA,KAAK,EAAE,EAHkC;AAIzCC,IAAAA,OAAO,EAAG;AAJ+B,GAAD,CAA1C;;AAQA,QAAMC,YAAY,GAAIH,IAAD,IAAW;AAC9BD,IAAAA,YAAY,CAAC;AACXC,MAAAA,IAAI,EAAEA;AADK,KAAD,CAAZ;AAGD,GAJD;;AAMA,QAAMI,WAAW,GAAIH,KAAD,IAAW;AAC7BF,IAAAA,YAAY,CAAC;AACXE,MAAAA,KAAK,EAAEA;AADI,KAAD,CAAZ;AAGD,GAJD;;AAMA,MAAII,OAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,YAAJ;;AAIA,QAAMC,eAAe,GAAG,MAAM;AAC5BX,IAAAA,SAAS,CAACI,OAAV,GAAoB,2BAApB;AACAJ,IAAAA,SAAS,CAACG,KAAV,GAAkB,EAAlB;AACAL,IAAAA,qBAAqB,GAClBc,IADH,CACSV,IAAD,IAAU;AACdF,MAAAA,SAAS,CAACI,OAAV,GAAoB,uBAApB;AACAJ,MAAAA,SAAS,CAACG,KAAV,GAAkB,EAAlB;AACAH,MAAAA,SAAS,CAACE,IAAV,GAAiBA,IAAjB;AAED,KANH,EAOGW,KAPH,CAOUC,GAAD,IAAS,CAEf,CATH;AAUD,GAbD;;AAgBA,MAAId,SAAS,CAACE,IAAd,EAAoB;AAClBK,IAAAA,OAAO,gBACL,QAAC,eAAD;AAAiB,MAAA,IAAI,EAAEP;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,KAAlB;AAAwB,MAAA,OAAO,EAAEW,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAxDQZ,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TranscodeOutput from \"./components/Transcoded\"\nimport {initializeTranscoding} from \"./services\"\nimport './App.css';\n\nfunction App() {\n  const [userState, setUserState] = useState({\n\n    data: {},\n    error: \"\",\n    message : \"\"\n  \n  });\n\n  const handleSearch = (data ) => {\n    setUserState({\n      data: data,\n    });\n  };\n\n  const handleError = (error) => {\n    setUserState({\n      error: error,\n    });\n  };\n\n  let content;\n  let searchPokemon;\n  let pokemonCard;\n  let errorContent;\n\n\n\n  const performFetching = () => {\n    userState.message = \"Conversion in Progress...\"\n    userState.error = \"\";\n    initializeTranscoding()\n      .then((data) => {\n        userState.message = \"Conversion completed!\"\n        userState.error = \"\";\n        userState.data = data;\n        \n      })\n      .catch((err) => {\n        \n      });\n  };\n\n\n  if (userState.data) {\n    content = (\n      <TranscodeOutput user={userState} />\n    );\n  }\n  return (\n    <div className=\"App\">\n      <button className=\"add\" onClick={performFetching}>\n       Intialize Convertion\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}