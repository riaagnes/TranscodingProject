{"ast":null,"code":"import axios from 'axios';\n\nconst convertNetworkError = err => {\n  return {\n    code: \"NETWORK-ERROR\",\n    err\n  };\n};\n\nconst convertServiceError = err => Promise.reject(err);\n\nexport const fetchLoginStatus = () => {\n  return fetch(\"/session\", {\n    method: \"GET\"\n  }).catch(convertNetworkError).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertServiceError);\n    }\n\n    return response.json();\n  });\n};\nexport const fetchLogin = username => {\n  return fetch(\"/session\", {\n    method: \"POST\",\n    headers: new Headers({\n      \"content-type\": \"application/json\"\n    }),\n    body: JSON.stringify({\n      username\n    })\n  }).catch(convertNetworkError).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertServiceError);\n    }\n\n    return response.json();\n  });\n};\nexport const initializeTranscoding = () => {\n  return fetch(`https://pokeapi.co/api/v2/pokemon/1/`, {\n    method: \"GET\"\n  }).catch(convertNetworkError).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertServiceError);\n    }\n\n    return response.json();\n  });\n};\nexport const fetchVedio = name => {\n  return fetch(`https://pokeapi.co/api/v2/pokemon/${name}/`, {\n    method: \"GET\"\n  }).catch(convertNetworkError).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertServiceError);\n    }\n\n    return response.json();\n  });\n};","map":{"version":3,"sources":["/Users/riaagnesjose/transcode/src/services.js"],"names":["axios","convertNetworkError","err","code","convertServiceError","Promise","reject","fetchLoginStatus","fetch","method","catch","then","response","ok","json","fetchLogin","username","headers","Headers","body","JSON","stringify","initializeTranscoding","fetchVedio","name"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,mBAAmB,GAAIC,GAAD,IAAS;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAE,eADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALH;;AAOE,MAAME,mBAAmB,GAAIF,GAAD,IAASG,OAAO,CAACC,MAAR,CAAeJ,GAAf,CAArC;;AAEA,OAAO,MAAMK,gBAAgB,GAAG,MAAM;AACpC,SAAOC,KAAK,CAAC,UAAD,EAAa;AACvBC,IAAAA,MAAM,EAAE;AADe,GAAb,CAAL,CAGJC,KAHI,CAGET,mBAHF,EAIJU,IAJI,CAIEC,QAAD,IAAc;AAClB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBP,mBAArB,CAAP;AACD;;AACD,WAAOQ,QAAQ,CAACE,IAAT,EAAP;AACD,GATI,CAAP;AAUD,CAXM;AAaP,OAAO,MAAMC,UAAU,GAAIC,QAAD,IAAc;AACtC,SAAOR,KAAK,CAAC,UAAD,EAAa;AACvBC,IAAAA,MAAM,EAAE,MADe;AAEvBQ,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,sBAAgB;AADG,KAAZ,CAFc;AAKvBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,MAAAA;AAAF,KAAf;AALiB,GAAb,CAAL,CAOJN,KAPI,CAOET,mBAPF,EAQJU,IARI,CAQEC,QAAD,IAAc;AAClB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBP,mBAArB,CAAP;AACD;;AACD,WAAOQ,QAAQ,CAACE,IAAT,EAAP;AACD,GAbI,CAAP;AAcD,CAfM;AAiBT,OAAO,MAAMQ,qBAAqB,GAAG,MAAM;AACvC,SAAOd,KAAK,CAAE,sCAAF,EAAyC;AACnDC,IAAAA,MAAM,EAAE;AAD2C,GAAzC,CAAL,CAGJC,KAHI,CAGET,mBAHF,EAIJU,IAJI,CAIEC,QAAD,IAAc;AAClB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBP,mBAArB,CAAP;AACD;;AACD,WAAOQ,QAAQ,CAACE,IAAT,EAAP;AACD,GATI,CAAP;AAUD,CAXI;AAaL,OAAO,MAAMS,UAAU,GAAIC,IAAD,IAAU;AAClC,SAAOhB,KAAK,CAAE,qCAAoCgB,IAAK,GAA3C,EAA+C;AACzDf,IAAAA,MAAM,EAAE;AADiD,GAA/C,CAAL,CAGJC,KAHI,CAGET,mBAHF,EAIJU,IAJI,CAIEC,QAAD,IAAc;AAClB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBP,mBAArB,CAAP;AACD;;AACD,WAAOQ,QAAQ,CAACE,IAAT,EAAP;AACD,GATI,CAAP;AAUD,CAXM","sourcesContent":["import axios from 'axios';\nconst convertNetworkError = (err) => {\n    return {\n      code: \"NETWORK-ERROR\",\n      err,\n    };\n  };\n\n  const convertServiceError = (err) => Promise.reject(err);\n\n  export const fetchLoginStatus = () => {\n    return fetch(\"/session\", {\n      method: \"GET\",\n    })\n      .catch(convertNetworkError)\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then(convertServiceError);\n        }\n        return response.json();\n      });\n  };\n\n  export const fetchLogin = (username) => {\n    return fetch(\"/session\", {\n      method: \"POST\",\n      headers: new Headers({\n        \"content-type\": \"application/json\",\n      }),\n      body: JSON.stringify({ username }),\n    })\n      .catch(convertNetworkError)\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then(convertServiceError);\n        }\n        return response.json();\n      });\n  };\n\nexport const initializeTranscoding = () => {\n    return fetch(`https://pokeapi.co/api/v2/pokemon/1/`, {\n      method: \"GET\",\n    })\n      .catch(convertNetworkError)\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then(convertServiceError);\n        }\n        return response.json();\n      });\n  };\n\n  export const fetchVedio = (name) => {\n    return fetch(`https://pokeapi.co/api/v2/pokemon/${name}/`, {\n      method: \"GET\",\n    })\n      .catch(convertNetworkError)\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then(convertServiceError);\n        }\n        return response.json();\n      });\n  };"]},"metadata":{},"sourceType":"module"}